Team Bord: Austin Ngan (Gerald), Thomas Yu (Perry), Mark Zhu (Bob the Third Jr), Roshani Shrestha (Pete)
SoftDev
P00 -- Web Blog Hosting Site

roshaniS -- 2021-10-28 19:39
- Organized the repo and added design_wiki0.pdf.
Feedback received for design_wiki0.pdf:
- Generally, the diagrams and information were good.
- The component map we made for this was actually a site map. Component maps should include backend information.

roshaniS -- 2021-10-28 22:30
- Added the description of the website/app and the launch codes to README.md.

thomasY -- 2021-10-28 23:06
- Housecleaning (moving things around in the repo)
- Updated component map to better show what is happening on the backend of the program
- Added flask sessions to the component map to show when the user is logged in and can edit their blog posts

thomasY -- 2021-10-29 09:04
- Added design_wiki1 to the repo

austinN -- 2021-10-29 09:20
- added initial app skeleton for the project
- added temporary templates to serve as a login feature (will change SOON)

roshaniS -- 2021-10-30 18:08
- Added additional templates (register.html, userblog.html)
- Modified templates to match variables in __init__.py
- Modified __init__.py so that it could create a simple working site with login capabilities

roshaniS -- 2021-10-30 18:22
- Added back actual design_wiki0.pdf
- Fixed because the previous pdf was actually of the first version of our design document (for the web log hosting site)
- Feedback from that design wiki document is in my first devlog entry

thomasY -- 2021-10-31 18:11
- Added correct design_wiki1.pdf
  - Feedback:
    - Most the design document lacked the needed clarity to proceed (components, database organization, maps)
    - Site map was too tiny to read
- Updated requirements.txt so that user can use the file to install the required packages

thomasY -- 2021-10-31 18:54
- Updated README with more detailed launch codes

thomasY -- 2021-10-31 21:27
- Fixed issues with launch codes
  - Wasn't in the correct directory when installing requirements
  - Replaced pip with pip3

austinN -- 2021-11-01 09:22
- added initial skeleton for database creation of users and their login info

roshaniS -- 2021-11-01 19:03
- Added loginpage.py to display the login and register pages
- Moved the code from __init__.py to loginpage.py but kept the original code in __init__.py (will change this soon)
- Modified the code so that logging in would allow the user to stay at the root
- Removed the condition for "GET"
- Added the register button and the functions associated with it (did not include the username/password checks using the database yet; only used hardcoded
  username/password, but will change soon)
- Fixed the logout function so that it redirects the user to the root and not just renders the login.html template
- There is still an error with the site after the user registers successfully; since the user is still on the /auth route, the user can only keep registering on the
  login page that is rendered after registering the first time. The user cannot login normally.

roshaniS -- 2021-11-01 19:07
- Fixed the errors that were present in loginpage.py ("UnboundLocalError: local variable 'tempUser' referenced before assignment")
  - These errors were present in the disp_loginpage() and authenticate() functions
  - Moved the sections of code after tempUser and tempPass were assigned back under the if statement checking if request.method == 'POST'
  - In the disp_loginpage() function: all the code below the variable assignments mentioned above up until "if "user" in session"
  - In the authenticate() function: all the code below the variable assignments mentioned above up until the end of the function

roshaniS -- 2021-11-02 09:31
- Added a dictionary for all the usernames and passwords, including new ones from registration
- Used this to check if the login and register capabilities worked
- There is still the error with the user staying on the /auth route and not being able to log in after registering successfully. If the user goes back to the root,
  however, they are able to log in successfully.

roshaniS -- 2021-11-02 16:32
- Emptied __init__.py

markZ -- 2021-11-02 16:45
-Hardcoded a blog post page template
-Tweaked the loginpage.py so that we can have a button to get to the blog post page and another button to get back to the main blog page
-Started work on a template for editing blog posts

thomasY -- 2021-11-02 17:02
- Made it so that duplicate usernames can't be added to the logins table

austinN -- 2021-11-02 17:08
- Added text box in the editBlog file (will feed information to the blog database later on)
- Added createBlog method in loginpage.py so that editing can at least have a start
- Added Create Post button in userblog.html

thomasY -- 2021--11-02 17:21
- Moved the check on the username and password to the authenticate function
- Created a new register_auth path to check the username and password when a user is registering
- Updated login.html and register.html with new actions in the forms

austinN -- 2021-11-03 09:03
- Touched up 'Finish Post' button
- Added 'Cancel Post' button

roshaniS -- 2021-11-03 09:06
- Fixed the issues with login after successful registration using redirect and url_for
- The user can now log in to the site after registering successfully (only with the hardcoded username and password, not the new username and password)

roshaniS -- 2021-11-04 09:06
- Replaced redirect and url_for with render_template to make it simpler
- Previously did not work correctly, which is why redirect and url_for were used, but after testing again, render_template worked

austinN - 2021-11-04 09:16
- Added function in userdb.py that adds login info to database
- Added addBlog function (not fully working) that will give a blog a random key and add text corresponding to the blog

austinN - 2021-11-05 09:15
- loginpage.py now imports userdb.py, register is now fully functioning and adds login info to a database

roshaniS - 2021-11-05 19:19
- Added a function to make a dictionary out of the logins table 
- Added a function in userdb.py to check if the username exists 
- Added a function in userdb.py to check if the username and password are both correct
- Used functions from userdb.py in the register_auth and authenticate functions of loginpage.py so that the user can login and register properly

austinN - 2021-11-07 14:09
- Added finishPost method in loginPage.py, which takes values from the editBlog form and adds them into the blog table
- editBlog.html now uses the correct actions and will submit the correct data
- The blogs table now has a 4th column 'title' to take the title of the blog entry created

austinN - 2021-11-08 09:22
- finishPost now displays the user's username in userblog.html after the new post has been created
- created findBlogs function in userdb.py, which takes the titles and text of the blogs corresponding to a username

roshaniS - 2021-11-08 09:24
- removed the message parameter when rendering login.html in the disp_loginpage function so that the login page doesn't display "None"
- added conditions (with appropriate error messages) in the register_auth function for if the user inputs no username and/or password on the register page
- added button on the register page (along with the appropriate function) for the user to go back to the login page

roshaniS - 2021-11-08 20:21
- removed commented out hardcoded username and password, as they aren't necessary anymore
- removed diagnostic print statements, were there for testing only
- added and changed some comments for readability; allows us to understand the code later on

roshaniS - 2021-11-08 23:31
- changed one comment
- moved code from loginpage.py to __init__.py 
- deleted loginpage.py
